if (msb_pos!=52){
mantissa[(msb_pos+1):52] <- FALSE }
mantissa[msb_pos] <- TRUE
}
frac = 1 + sum(mantissa * 2^(-(1:52)))
print(sum(mantissa * 2^(-(1:52))))
# convert the bit vector to decimal format
IEEEtoDecimal(ifelse(sign, -1, 1),
exponent,
frac)
}
next_float(2)
# Output: 1.0000000000000002220446049250313
###?
next_float <- function(x) {
bits <- as.numeric(as.logical(intToBits(x)))
sign <- bits[1]
exponent <- bits[2:9]
mantissa <- rev(bits[10:32])
if (all(mantissa)) {
mantissa = rep(0, 23)
exponent = exponent + 1
}else
# find position of most significant bit
{
msb_pos <- max(which(mantissa==0))
# add 1 to the next bit
if (msb_pos!=23){
mantissa[(msb_pos+1):23] <- 0 }
mantissa[msb_pos] <- 1
}
sign = (-1)^sign
exponent = log2int(exponent)-127
print(sum(mantissa * 2^(-(1:23))))
mantissa = as.double(1)+sum(mantissa * 2^(-(1:23)))
new_x = sign * mantissa * 2^ exponent
print(new_x,digit=32)
#new_x <- (rev(c(sign,exponent,rev(mantissa))))
# new_x <- paste(new_x,collapse="")
# print(rev(mantissa))
# new_x <- strtoi(new_x,base=2)
return(new_x)
}
nextFloat <- function(x) {
# bits <- paste(c(intToBits(x)),collapse="")
# bits <- strsplit(bits,"")[[1]]
# bits <- as.numeric(bits)
# bits <- as.logical(bits)
bits <- reverse_vector(as.logical(intToBits(x)))
sign = bits[1]
exponent = log2int(bits[2:12])
mantissa = bits[13:64]
# check if all bits are 1
if (all(mantissa)) {
mantissa = rep(FALSE, 52)
exponent = exponent + 1
}else
# find position of most significant bit
{print(mantissa)
msb_pos <- max(which(mantissa==FALSE))
# add 1 to the next bit
if (msb_pos!=52){
mantissa[(msb_pos+1):52] <- FALSE }
mantissa[msb_pos] <- TRUE
}
frac = 1 + sum(mantissa * 2^(-(1:52)))
print(sum(mantissa * 2^(-(1:52))))
# convert the bit vector to decimal format
IEEEtoDecimal(ifelse(sign, -1, 1),
exponent,
frac)
}
next_float(2)
###?
next_float <- function(x) {
bits <- as.numeric(as.logical(intToBits(x)))
sign <- bits[1]
exponent <- bits[2:9]
mantissa <- rev(bits[10:32])
if (all(mantissa)) {
mantissa = rep(0, 23)
exponent = exponent + 1
}else
# find position of most significant bit
{
msb_pos <- max(which(mantissa==0))
# add 1 to the next bit
if (msb_pos!=23){
mantissa[(msb_pos+1):23] <- 0 }
mantissa[msb_pos] <- 1
}
sign = (-1)^sign
exponent = log2int(exponent)-127
print(sum(mantissa * 2^(-(1:23))))
mantissa = as.double(1)+sum(mantissa * 2^(-(1:23)))
new_x = sign * mantissa * 2^ exponent
print(new_x,digit=20)
#new_x <- (rev(c(sign,exponent,rev(mantissa))))
# new_x <- paste(new_x,collapse="")
# print(rev(mantissa))
# new_x <- strtoi(new_x,base=2)
return(new_x)
}
nextFloat <- function(x) {
# bits <- paste(c(intToBits(x)),collapse="")
# bits <- strsplit(bits,"")[[1]]
# bits <- as.numeric(bits)
# bits <- as.logical(bits)
bits <- reverse_vector(as.logical(intToBits(x)))
sign = bits[1]
exponent = log2int(bits[2:12])
mantissa = bits[13:64]
# check if all bits are 1
if (all(mantissa)) {
mantissa = rep(FALSE, 52)
exponent = exponent + 1
}else
# find position of most significant bit
{print(mantissa)
msb_pos <- max(which(mantissa==FALSE))
# add 1 to the next bit
if (msb_pos!=52){
mantissa[(msb_pos+1):52] <- FALSE }
mantissa[msb_pos] <- TRUE
}
frac = 1 + sum(mantissa * 2^(-(1:52)))
print(sum(mantissa * 2^(-(1:52))))
# convert the bit vector to decimal format
IEEEtoDecimal(ifelse(sign, -1, 1),
exponent,
frac)
}
next_float(2)
# Output: 1.0000000000000002220446049250313
###?
next_float <- function(x) {
bits <- as.numeric(as.logical(intToBits(x)))
sign <- bits[1]
exponent <- bits[2:9]
mantissa <- rev(bits[10:32])
if (all(mantissa)) {
mantissa = rep(0, 23)
exponent = exponent + 1
}else
# find position of most significant bit
{
msb_pos <- max(which(mantissa==0))
# add 1 to the next bit
if (msb_pos!=23){
mantissa[(msb_pos+1):23] <- 0 }
mantissa[msb_pos] <- 1
}
sign = (-1)^sign
exponent = log2int(exponent)-127
print(sum(mantissa * 2^(-(1:23))))
mantissa = as.double(1)+sum(mantissa * 2^(-(1:23)))
new_x = sign * mantissa * 2^ exponent
print(new_x,digits=20)
#new_x <- (rev(c(sign,exponent,rev(mantissa))))
# new_x <- paste(new_x,collapse="")
# print(rev(mantissa))
# new_x <- strtoi(new_x,base=2)
return(new_x)
}
nextFloat <- function(x) {
# bits <- paste(c(intToBits(x)),collapse="")
# bits <- strsplit(bits,"")[[1]]
# bits <- as.numeric(bits)
# bits <- as.logical(bits)
bits <- reverse_vector(as.logical(intToBits(x)))
sign = bits[1]
exponent = log2int(bits[2:12])
mantissa = bits[13:64]
# check if all bits are 1
if (all(mantissa)) {
mantissa = rep(FALSE, 52)
exponent = exponent + 1
}else
# find position of most significant bit
{print(mantissa)
msb_pos <- max(which(mantissa==FALSE))
# add 1 to the next bit
if (msb_pos!=52){
mantissa[(msb_pos+1):52] <- FALSE }
mantissa[msb_pos] <- TRUE
}
frac = 1 + sum(mantissa * 2^(-(1:52)))
print(sum(mantissa * 2^(-(1:52))))
# convert the bit vector to decimal format
IEEEtoDecimal(ifelse(sign, -1, 1),
exponent,
frac)
}
next_float(2)
# Output: 1.0000000000000002220446049250313
###?
next_float <- function(x) {
bits <- as.numeric(as.logical(intToBits(x)))
sign <- bits[1]
exponent <- bits[2:9]
mantissa <- rev(bits[10:32])
if (all(mantissa)) {
mantissa = rep(0, 23)
exponent = exponent + 1
}else
# find position of most significant bit
{
msb_pos <- max(which(mantissa==0))
# add 1 to the next bit
if (msb_pos!=23){
mantissa[(msb_pos+1):23] <- 0 }
mantissa[msb_pos] <- 1
}
sign = (-1)^sign
exponent = log2int(exponent)-127
mantissa = as.double(1)+sum(mantissa * 2^(-(1:23)))
new_x = sign * mantissa * 2^ exponent
print(new_x,digits=20)
#new_x <- (rev(c(sign,exponent,rev(mantissa))))
# new_x <- paste(new_x,collapse="")
# print(rev(mantissa))
# new_x <- strtoi(new_x,base=2)
return(new_x)
}
nextFloat <- function(x) {
# bits <- paste(c(intToBits(x)),collapse="")
# bits <- strsplit(bits,"")[[1]]
# bits <- as.numeric(bits)
# bits <- as.logical(bits)
bits <- reverse_vector(as.logical(intToBits(x)))
sign = bits[1]
exponent = log2int(bits[2:12])
mantissa = bits[13:64]
# check if all bits are 1
if (all(mantissa)) {
mantissa = rep(FALSE, 52)
exponent = exponent + 1
}else
# find position of most significant bit
{print(mantissa)
msb_pos <- max(which(mantissa==FALSE))
# add 1 to the next bit
if (msb_pos!=52){
mantissa[(msb_pos+1):52] <- FALSE }
mantissa[msb_pos] <- TRUE
}
frac = 1 + sum(mantissa * 2^(-(1:52)))
print(sum(mantissa * 2^(-(1:52))))
# convert the bit vector to decimal format
IEEEtoDecimal(ifelse(sign, -1, 1),
exponent,
frac)
}
next_float(2)
# Output: 1.0000000000000002220446049250313
###?
next_float <- function(x) {
bits <- as.numeric(as.logical(intToBits(x)))
sign <- bits[1]
exponent <- bits[2:9]
mantissa <- rev(bits[10:32])
if (all(mantissa)) {
mantissa = rep(0, 23)
exponent = exponent + 1
}else
# find position of most significant bit
{
msb_pos <- max(which(mantissa==0))
# add 1 to the next bit
if (msb_pos!=23){
mantissa[(msb_pos+1):23] <- 0 }
mantissa[msb_pos] <- 1
}
sign = (-1)^sign
exponent = log2int(exponent)-127
mantissa = as.double(1)+sum(mantissa * 2^(-(1:23)))
new_x = sign * mantissa * 2^ exponent
paste(new_x,collapse="")
#new_x <- (rev(c(sign,exponent,rev(mantissa))))
# new_x <- paste(new_x,collapse="")
# print(rev(mantissa))
# new_x <- strtoi(new_x,base=2)
return(new_x)
}
next_float(2)
# Output: 1.0000000000000002220446049250313
###?
next_float <- function(x) {
bits <- as.numeric(as.logical(intToBits(x)))
sign <- bits[1]
exponent <- bits[2:9]
mantissa <- rev(bits[10:32])
if (all(mantissa)) {
mantissa = rep(0, 23)
exponent = exponent + 1
}else
# find position of most significant bit
{
msb_pos <- max(which(mantissa==0))
# add 1 to the next bit
if (msb_pos!=23){
mantissa[(msb_pos+1):23] <- 0 }
mantissa[msb_pos] <- 1
}
sign = (-1)^sign
exponent = log2int(exponent)-127
mantissa = as.double(1)+sum(mantissa * 2^(-(1:23)))
new_x = sign * mantissa * 2^ exponent
new_x = paste(new_x,collapse="")
#new_x <- (rev(c(sign,exponent,rev(mantissa))))
# new_x <- paste(new_x,collapse="")
# print(rev(mantissa))
# new_x <- strtoi(new_x,base=2)
return(new_x)
}
next_float(2)
# Output: 1.0000000000000002220446049250313
###?
next_float <- function(x) {
bits <- as.numeric(as.logical(intToBits(x)))
sign <- bits[1]
exponent <- bits[2:9]
mantissa <- rev(bits[10:32])
if (all(mantissa)) {
mantissa = rep(0, 23)
exponent = exponent + 1
}else
# find position of most significant bit
{
msb_pos <- max(which(mantissa==0))
# add 1 to the next bit
if (msb_pos!=23){
mantissa[(msb_pos+1):23] <- 0 }
mantissa[msb_pos] <- 1
}
sign = (-1)^sign
exponent = log2int(exponent)-127
mantissa = as.double(1)+sum(mantissa * 2^(-(1:23)))
new_x = sign * mantissa * 2^ exponent
new_x = paste(new_x,collapse="")
#new_x <- (rev(c(sign,exponent,rev(mantissa))))
# new_x <- paste(new_x,collapse="")
# print(rev(mantissa))
# new_x <- strtoi(new_x,base=2)
return(new_x)
}
as.double(next_float(2))
# Output: 1.0000000000000002220446049250313
###?
next_float <- function(x) {
bits <- as.numeric(as.logical(intToBits(x)))
sign <- bits[1]
exponent <- bits[2:9]
mantissa <- rev(bits[10:32])
if (all(mantissa)) {
mantissa = rep(0, 23)
exponent = exponent + 1
}else
# find position of most significant bit
{
msb_pos <- max(which(mantissa==0))
# add 1 to the next bit
if (msb_pos!=23){
mantissa[(msb_pos+1):23] <- 0 }
mantissa[msb_pos] <- 1
}
sign = (-1)^sign
exponent = log2int(exponent)-127
mantissa = as.double(1)+sum(mantissa * 2^(-(1:23)))
new_x = sign * mantissa * 2^ exponent
new_x = paste(new_x,collapse="")
#new_x <- (rev(c(sign,exponent,rev(mantissa))))
# new_x <- paste(new_x,collapse="")
# print(rev(mantissa))
# new_x <- strtoi(new_x,base=2)
return(new_x)
}
next_float(2)
# Output: 1.0000000000000002220446049250313
###?
next_float <- function(x) {
bits <- as.numeric(as.logical(intToBits(x)))
sign <- bits[1]
exponent <- bits[2:9]
mantissa <- rev(bits[10:32])
if (all(mantissa)) {
mantissa = rep(0, 23)
exponent = exponent + 1
}else
# find position of most significant bit
{
msb_pos <- max(which(mantissa==0))
# add 1 to the next bit
if (msb_pos!=23){
mantissa[(msb_pos+1):23] <- 0 }
mantissa[msb_pos] <- 1
}
sign = (-1)^sign
exponent = log2int(exponent)-127
mantissa = as.double(1)+sum(mantissa * 2^(-(1:23)))
new_x = sign * mantissa * 2^ exponent
new_x = paste(new_x,collapse="")
return(new_x)
}
next_float(2)
# Output: 2.000000238418579
intToBits(2)
as.numeric(intToBits(2))
as.logical(intToBits(2))
###?
next_float <- function(x) {
bits <- as.numeric(as.logical(intToBits(x)))
sign <- bits[1]
exponent <- bits[2:9]
mantissa <- rev(bits[10:32])
if (all(mantissa)) {
mantissa = rep(0, 23)
exponent = exponent + 1
}else
# find position of most significant bit
{
msb_pos <- max(which(mantissa==0))
# add 1 to the next bit
if (msb_pos!=23){
mantissa[(msb_pos+1):23] <- 0 }
mantissa[msb_pos] <- 1
}
sign = (-1)^sign
exponent = log2int(exponent)-127
mantissa = 1+sum(mantissa * 2^(-(1:23)))
new_x = sign * mantissa * 2^ exponent
new_x = paste(new_x,collapse="")
return(new_x)
}
next_float(2)
# Output: 2.000000238418579
?.Machine
2.225074e-308
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(dev = "png",
dpi = 600,
echo = FALSE,
cache = TRUE)
library(NetCoMi)
get.dat <- function(path){
# load data n x d (samples x OTUs)
dat <- read.table(path,sep='\t',header = TRUE,row.names = 1)
dat[is.na(dat)] <- 0
return (dat)
}
# calculate network
get.network <- function(dat,pathout){
net_spring <- netConstruct(dat,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 50),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 0.01),# my data is abundance
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 2,
seed = 123456)
# analyze it
props_spring <- netAnalyze(net_spring,
centrLCC = TRUE,
gcmHeat = FALSE, # not to plot automatically
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
# plot manually
png(past(pathout,'/GCM.cluster.png'),width=700,height=600)
plotHeat(mat = props_spring$graphletLCC$gcm1,
pmat = props_spring$graphletLCC$pAdjust1,
type = "mixed",
title = "GCM",
#textCex = 0.5,
colorLim = c(-1, 1),
mar = c(2, 0, 2, 0))
# Add rectangles highlighting the four types of orbits
graphics::rect(xleft   = c( 0.5,  1.5, 4.5,  7.5),
ybottom = c(11.5,  7.5, 4.5,  0.5),
xright  = c( 1.5,  4.5, 7.5, 11.5),
ytop    = c(10.5, 10.5, 7.5,  4.5),
lwd = 2, xpd = NA)
text(6, -0.2, xpd = NA,
"Significance codes:  ***: 0.001;  **: 0.01;  *: 0.05")
# summary
summary(props_spring, numbNodes = 5L)
# viz the network
png(paste(pathout,'/network.png'),width=700,height=600)
p <- plot(props_spring,
nodeColor = "cluster",
nodeSize = "eigenvector",
title1 = "Network on OTU level with SPRING associations",
showTitle = TRUE,
cexNodes = 6,
cexTitle = 0.8)
legend(0.5, 1.1, cex = 0.8, title = "estimated association:",
legend = c("+","-"), lty = 1, lwd = 3, col = c("#009900","red"),
bty = "n", horiz = TRUE)
}
main <- function(pathin,pathout){
dat <- get.dat(pathin)
get.network(dat,pathout)}
setwd("/Users/zijianleowang/Desktop/GitHub/NetworkAnalysis/scripts")
pathin = "../abundance/genus.tsv"
pathout = "../output"
main(pathin,pathout)
